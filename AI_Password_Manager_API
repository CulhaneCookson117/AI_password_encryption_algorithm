from flask import Flask, request, jsonify
import hashlib
import random
import secrets
from Crypto.Cipher import AES, ChaCha20, Twofish
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from Crypto.Random import get_random_bytes

app = Flask(__name__)

class LightweightAIEncryptor:
    def __init__(self):
        self.encryption_scheme = self.generate_new_scheme()
        self.aes_key = get_random_bytes(16)  # AES key
        self.chacha20_key = get_random_bytes(32)  # ChaCha20 key
        self.twofish_key = get_random_bytes(16)  # Twofish key
        self.rsa_key = RSA.generate(2048)
        self.encryption_methods = ['AES', 'RSA', 'ChaCha20', 'Twofish']
        
    def generate_new_scheme(self):
        return ''.join(random.choices('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()', k=16))

    def encrypt(self, segment, method):
        segment = segment.encode()
        if method == 'AES':
            cipher = AES.new(self.aes_key, AES.MODE_EAX)
            ciphertext, tag = cipher.encrypt_and_digest(segment)
            return cipher.nonce + tag + ciphertext
        elif method == 'RSA':
            cipher = PKCS1_OAEP.new(self.rsa_key.publickey())
            ciphertext = cipher.encrypt(segment)
            return ciphertext
        elif method == 'ChaCha20':
            cipher = ChaCha20.new(key=self.chacha20_key)
            ciphertext = cipher.encrypt(segment)
            return cipher.nonce + ciphertext
        elif method == 'Twofish':
            cipher = Twofish.new(self.twofish_key, Twofish.MODE_EAX)
            ciphertext, tag = cipher.encrypt_and_digest(segment)
            return cipher.nonce + tag + ciphertext

    def decrypt(self, encrypted_data, scheme, method):
        if method == 'AES':
            nonce, tag, ciphertext = encrypted_data[:16], encrypted_data[16:32], encrypted_data[32:]
            cipher = AES.new(self.aes_key, AES.MODE_EAX, nonce=nonce)
            return cipher.decrypt_and_verify(ciphertext, tag).decode()
        elif method == 'RSA':
            cipher = PKCS1_OAEP.new(self.rsa_key)
            return cipher.decrypt(encrypted_data).decode()
        elif method == 'ChaCha20':
            nonce, ciphertext = encrypted_data[:8], encrypted_data[8:]
            cipher = ChaCha20.new(key=self.chacha20_key, nonce=nonce)
            return cipher.decrypt(ciphertext).decode()
        elif method == 'Twofish':
            nonce, tag, ciphertext = encrypted_data[:16], encrypted_data[16:32], encrypted_data[32:]
            cipher = Twofish.new(self.twofish_key, Twofish.MODE_EAX, nonce=nonce)
            return cipher.decrypt_and_verify(ciphertext, tag).decode()

    def update_encryption_scheme(self):
        self.encryption_scheme = self.generate_new_scheme()
        self.aes_key = get_random_bytes(16)
        self.chacha20_key = get_random_bytes(32)
        self.twofish_key = get_random_bytes(16)

ai_encryptor = LightweightAIEncryptor()

@app.route('/encrypt', methods=['POST'])
def encrypt_endpoint():
    data = request.json.get('data')
    method = request.json.get('method')
    encrypted_data = ai_encryptor.encrypt(data, method)
    return jsonify({"encrypted_data": encrypted_data.hex()})

@app.route('/decrypt', methods=['POST'])
def decrypt_endpoint():
    encrypted_data = bytes.fromhex(request.json.get('encrypted_data'))
    scheme = request.json.get('scheme')
    method = request.json.get('method')
    decrypted_data = ai_encryptor.decrypt(encrypted_data, scheme, method)
    return jsonify({"decrypted_data": decrypted_data})

@app.route('/updateScheme', methods=['POST'])
def update_scheme_endpoint():
    ai_encryptor.update_encryption_scheme()
    return jsonify({"message": "Encryption scheme updated"})

@app.route('/healthCheck', methods=['GET'])
def health_check_endpoint():
    return jsonify({"status": "API is running"})

if __name__ == '__main__':
    app.run(debug=True)
