import hashlib
import time
import random
import secrets
import threading

class LightweightAIEncryptor:
    def __init__(self):
        self.encryption_scheme = self.generate_new_scheme()

    def generate_new_scheme(self):
        """Simulate generating a new encryption scheme"""
        return ''.join(random.choices('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()', k=16))

    def encrypt(self, segment):
        """Simulate encryption using the current scheme"""
        return ''.join(random.choice(self.encryption_scheme) for _ in segment)

    def decrypt(self, segment, scheme):
        """Simulate decryption using the provided scheme"""
        return ''.join(random.choice(scheme) for _ in segment)
      
    def update_encryption_scheme(self):
        """Simulate updating the encryption scheme"""
        self.encryption_scheme = self.generate_new_scheme()

class PasswordEncryptor:
    def __init__(self, ai_encryptor):
        self.ai_encryptor = ai_encryptor
        self.update_interval = 3600
        self.attempts = 0  # Track decryption attempts
        self.locked = False
        threading.Thread(target=self.regular_update).start()

    def add_salt_and_hash(self, password):
        salt = secrets.token_hex(8)  # Generate a secure random salt
        salted_password = password + salt
        hashed_password = hashlib.sha256(salted_password.encode()).hexdigest()
        return hashed_password, salt

    def dynamic_encrypt(self, password, salt):
        segment_size = len(password) // 4  # Divide password into quarters
        segment_index = random.randint(0, 3)  # Randomly select a segment to encrypt
        start_index = segment_index * segment_size
        end_index = start_index + segment_size
        encrypted_part = self.ai_encryptor.encrypt(password[start_index:end:index] + salt)
        return encrypted_part, password[:start_index] + encrypted_part + password[end_index:]

    def dynamic_decrypt(self, encrypted_data, scheme):
        """Decrypt function to simulate MFA integration"""
        if self.locked:
            raise Exception("Too many incorrect attempts. Please wait for the next update cycle.")
          
        self.attempts += 1
        if self.attempts > 5:  # Lock after 5 attempts
            self.locked = True
            return "Locked due to too many attempts. Wait for next cycle."
          
        decrypted_part = self.ai_encryptor.decrypt(encrypted_data, scheme)
        return decrypted_part

    def regular_update(self):
        while True:
            self.ai_encryptor.update_encryption_scheme()  # Update encryption scheme
            self.attempts = 0  # Reset attempts after each cycle
            self.locked = False  # Unlock after each cycle
            time.sleep(self.update_interval)  # Wait for the next update interval

    def log_audit_event(self, event):
        with open("audit_log.txt", "a") as log_file:
            log_file.write(f"{time.ctime()} - {event}\n")

    def start_encryption(self, user_password):
        hashed_password, password_salt = self.add_salt_and_hash(user_password)
        encrypted_password, combined_encrypted = self.dynamic_encrypt(hashed_password, password_salt)
        self.log_audit_event(f"Password encrypted: {combined_encrypted}")

        return {
            "Original Password": user_password,
            "Salt": password_salt,
            "Hashed Password": hashed_password,
            "Encrypted Password": combined_encrypted
        }

# Create instances
ai_encryptor = LightweightAIEncryptor()
password_encryptor = PasswordEncryptor(ai_encryptor)

# User's input password
user_password = "ExamplePassword123!"

# Start encryption process
result = password_encryptor.start_encryption(user_password)

# Output results for verification
for key, value in result.items():
    print(f"{key}: {value}")

# Simulate MFA decryption process
try:
    for _ in range(7):  # Simulate 7 decryption attempts
        decrypted_data = password_encryptor.dynamic_decrypt(result["Encrypted Password"], ai_encryptor.encryption_scheme)
        print(f"Decrypted Data for MFA: {decrypted_data}")
except Exception as e:
    print(e)
