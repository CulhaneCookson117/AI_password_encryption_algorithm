import hashlib
import time
import random
import secrets
import threading
from Crypto.Cipher import AES, ChaCha20, Twofish
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from Crypto.Random import get_random_bytes

class LightweightAIEncryptor:
    def __init__(self):
        self.encryption_scheme = self.generate_new_scheme()
        self.aes_key = get_random_bytes(16)  # AES key
        self.chacha20_key = get_random_bytes(32)  # ChaCha20 key
        self.twofish_key = get_random_bytes(16)  # Twofish key
        self.rsa_key = RSA.generate(2048)
        self.encryption_methods = ['AES', 'RSA', 'ChaCha20', 'Twofish']
        
    def generate_new_scheme(self):
        """Simulate generating a new encryption scheme"""
        return ''.join(random.choices('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()', k=16))

    def encrypt(self, segment, method):
        """Encrypt using the chosen method (AES, RSA, ChaCha20, or Twofish)"""
        segment = segment.encode()
        if method == 'AES':
            cipher = AES.new(self.aes_key, AES.MODE_EAX)
            ciphertext, tag = cipher.encrypt_and_digest(segment)
            return cipher.nonce + tag + ciphertext
        elif method == 'RSA':
            cipher = PKCS1_OAEP.new(self.rsa_key.publickey())
            ciphertext = cipher.encrypt(segment)
            return ciphertext
        elif method == 'ChaCha20':
            cipher = ChaCha20.new(key=self.chacha20_key)
            ciphertext = cipher.encrypt(segment)
            return cipher.nonce + ciphertext
        elif method == 'Twofish':
            cipher = Twofish.new(self.twofish_key, Twofish.MODE_EAX)
            ciphertext, tag = cipher.encrypt_and_digest(segment)
            return cipher.nonce + tag + ciphertext


    def decrypt(self, encrypted_data, scheme, method):
        """Decrypt using the chosen method (AES, RSA, ChaCha20, or Twofish)"""
        if method == 'AES':
            nonce, tag, ciphertext = encrypted_data[:16], encrypted_data[16:32], encrypted_data[32:]
            cipher = AES.new(self.aes_key, AES.MODE_EAX, nonce=nonce)
            return cipher.decrypt_and_verify(ciphertext, tag).decode()
        elif method == 'RSA':
            cipher = PKCS1_OAEP.new(self.rsa_key)
            return cipher.decrypt(encrypted_data).decode()
        elif method == 'ChaCha20':
            nonce, ciphertext = encrypted_data[:8], encrypted_data[8:]
            cipher = ChaCha20.new(key=self.chacha20_key, nonce=nonce)
            return cipher.decrypt(ciphertext).decode()
        elif method == 'Twofish':
            nonce, tag, ciphertext = encrypted_data[:16], encrypted_data[16:32], encrypted_data[32:]
            cipher = Twofish.new(self.twofish_key, Twofish.MODE_EAX, nonce=nonce)
            return cipher.decrypt_and_verify(ciphertext, tag).decode()

    def update_encryption_scheme(self):
        """Simulate updating the encryption scheme"""
        self.encryption_scheme = self.generate_new_scheme()
        self.aes_key = get_random_bytes(16)  # Update AES key
        self.chacha20_key = get_random_bytes(32)  # Update ChaCha20 key
        self.twofish_key = get_random_bytes(16)  # Update Twofish key

class PasswordEncryptor:
    def __init__(self, ai_encryptor):
        self.ai_encryptor = ai_encryptor
        self.update_interval = 3600
        self.attempts = 0  # Track decryption attempts
        self.locked = False
        threading.Thread(target=self.regular_update).start()

    def add_salt_and_hash(self, password):
        salt = secrets.token_hex(8)  # Generate a secure random salt
        salted_password = password + salt
        hashed_password = hashlib.sha256(salted_password.encode()).hexdigest()
        return hashed_password, salt

    def dynamic_encrypt(self, password, salt):
        segment_size = len(password) // 4  # Divide password into quarters
        segment_index = random.randint(0, 3)  # Randomly select a segment to encrypt
        start_index = segment_index * segment_size
        end_index = start_index + segment_size
        method = random.choice(self.ai_encryptor.encryption_methods)  # Randomly select an encryption method
        encrypted_part = self.ai_encryptor.encrypt(password[start_index:end_index] + salt, method)
        return method, encrypted_part, password[:start_index] + encrypted_part.hex() + password[end_index:]

    def dynamic_decrypt(self, encrypted_data, scheme, method):
        """Decrypt function to simulate MFA integration"""
        if self.locked:
            raise Exception("Too many incorrect attempts. Please wait for the next update cycle.")
          
        self.attempts += 1
        if self.attempts > 5:  # Lock after 5 attempts
            self.locked = True
            return "Locked due to too many attempts. Wait for next cycle."
          
        decrypted_part = self.ai_encryptor.decrypt(bytes.fromhex(encrypted_data), scheme, method)
        return decrypted_part

    def regular_update(self):
        while True:
            self.ai_encryptor.update_encryption_scheme()  # Update encryption scheme
            self.attempts = 0  # Reset attempts after each cycle
            self.locked = False  # Unlock after each cycle
            time.sleep(self.update_interval)  # Wait for the next update interval

    def log_audit_event(self, event):
        with open("audit_log.txt", "a") as log_file:
            log_file.write(f"{time.ctime()} - {event}\n")

    def start_encryption(self, user_password):
        hashed_password, password_salt = self.add_salt_and_hash(user_password)
        method, encrypted_password, combined_encrypted = self.dynamic_encrypt(hashed_password, password_salt)
        self.log_audit_event(f"Password encrypted: {combined_encrypted}")

        return {
            "Original Password": user_password,
            "Salt": password_salt,
            "Hashed Password": hashed_password,
            "Encryption Method": method,
            "Encrypted Password": combined_encrypted
        }

# Create instances
ai_encryptor = LightweightAIEncryptor()
password_encryptor = PasswordEncryptor(ai_encryptor)

# User's input password
user_password = "ExamplePassword123!"

# Start encryption process
result = password_encryptor.start_encryption(user_password)

# Output results for verification
for key, value in result.items():
    print(f"{key}: {value}")

# Simulate MFA decryption process
try:
    for _ in range(7):  # Simulate 7 decryption attempts
        decrypted_data = password_encryptor.dynamic_decrypt(result["Encrypted Password"], ai_encryptor.encryption_scheme, result["Encryption Method"])
        print(f"Decrypted Data for MFA: {decrypted_data}")
except Exception as e:
    print(e)

