import numpy as np
import random
import threading
import hashlib
import time
import memory_profiler
import psutil
import matplotlib.pyplot as plt
from flask import Flask, request, jsonify
from Crypto.Cipher import AES, ChaCha20, PKCS1_OAEP
from Crypto.PublicKey import RSA
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad, unpad
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import logging

# Configure logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# Sample data for ML training
sample_data = np.array([
    [10, 1, 1, 0, 3], [15, 2, 1, 1, 4], [20, 0, 0, 2, 2], [25, 1, 1, 0, 3],
    [12, 2, 1, 1, 4], [18, 0, 0, 2, 2], [22, 1, 1, 0, 3], [30, 2, 0, 1, 4]
])
X = sample_data[:, :4]  # Features: segment length, data type, previous success, and method index
y = sample_data[:, 4]   # Labels: number of layers

# Split data into training and validation sets
X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the ML models
model = RandomForestClassifier(n_estimators=100)
model.fit(X_train[:, :3], y_train)  # Predict number of layers

model_method = RandomForestClassifier(n_estimators=100)
model_method.fit(X_train[:, :3], X_train[:, 3])  # Predict method index

# Validate the ML models
predictions_method = model_method.predict(X_valid[:, :3])
predictions_layers = model.predict(X_valid[:, :3])
logging.info(f"Method prediction accuracy: {accuracy_score(X_valid[:, 3], predictions_method)}")
logging.info(f"Layer prediction accuracy: {accuracy_score(y_valid, predictions_layers)}")

# Key Manager and Encryptor Classes
class KeyManager:
    def __init__(self):
        self.keys = {}
    
    def generate_key(self, method_index):
        if method_index not in self.keys:
            if method_index == 0:  # AES
                key = get_random_bytes(16)
            elif method_index == 1:  # ChaCha20
                key = get_random_bytes(32)
            elif method_index == 2:  # RSA
                key = RSA.generate(2048)
            self.keys[method_index] = key
        return self.keys[method_index]

class Encryptor:
    def __init__(self, key_manager):
        self.key_manager = key_manager

    def encrypt(self, data, method_index):
        key = self.key_manager.generate_key(method_index)
        if method_index == 0:  # AES
            cipher = AES.new(key, AES.MODE_CBC)
            ciphertext = cipher.encrypt(pad(data.encode(), AES.block_size))
            return cipher.iv + ciphertext
        elif method_index == 1:  # ChaCha20
            cipher = ChaCha20.new(key=key)
            ciphertext = cipher.encrypt(data.encode())
            return cipher.nonce + ciphertext
        elif method_index == 2:  # RSA
            cipher = PKCS1_OAEP.new(key.publickey())
            ciphertext = cipher.encrypt(data.encode())
            return ciphertext

    def decrypt(self, data, method_index):
        key = self.key_manager.generate_key(method_index)
        if method_index == 0:  # AES
            iv = data[:16]
            ciphertext = data[16:]
            cipher = AES.new(key, AES.MODE_CBC, iv)
            plaintext = unpad(cipher.decrypt(ciphertext), AES.block_size)
            return plaintext.decode()
        elif method_index == 1:  # ChaCha20
            nonce = data[:8]
            ciphertext = data[8:]
            cipher = ChaCha20.new(key=key, nonce=nonce)
            plaintext = cipher.decrypt(ciphertext)
            return plaintext.decode()
        elif method_index == 2:  # RSA
            cipher = PKCS1_OAEP.new(key)
            plaintext = cipher.decrypt(data)
            return plaintext.decode()

class PasswordSegmenter:
    def __init__(self, segment_count):
        self.segment_count = segment_count

    def segment_password(self, password):
        segment_length = len(password) // self.segment_count
        return [password[i * segment_length:(i + 1) * segment_length] for i in range(self.segment_count)]

class PasswordEncryptor:
    def __init__(self, encryptor):
        self.encryptor = encryptor

    def encrypt_password(self, password, method_index, segment_count):
        segmenter = PasswordSegmenter(segment_count)
        segments = segmenter.segment_password(password)
        encrypted_segments = [self.encryptor.encrypt(segment, method_index) for segment in segments]
        return encrypted_segments

    def decrypt_password(self, encrypted_segments, method_index, segment_count):
        decrypted_segments = [self.encryptor.decrypt(segment, method_index) for segment in encrypted_segments]
        return ''.join(decrypted_segments)

# ML-Enhanced Encryption Function
def encrypt_password_with_ml(password):
    # Use ML model to determine encryption parameters
    segment_count = model.predict([[len(password), 1, 1, 0]])[0]
    method_index = model_method.predict([[len(password), 1, 1, 0]])[0]

    # Encrypt the password using segmentation principles
    key_manager = KeyManager()
    encryptor = Encryptor(key_manager)
    password_encryptor = PasswordEncryptor(encryptor)

    encrypted_segments = password_encryptor.encrypt_password(password, method_index, segment_count)
    return encrypted_segments

# Define sample passwords
passwords = ["password123", "qwerty", "letmein", "superSecurePassword!", "123456789"]

# Function to measure computational costs
def measure_costs(encryption_function, password):
    # Measure time
    start_time = time.time()
    encrypted_password = encryption_function(password)
    encryption_time = time.time() - start_time
    
    # Measure memory
    mem_usage = memory_profiler.memory_usage((encryption_function, (password,)), interval=0.1, timeout=None)
    max_memory = max(mem_usage) - min(mem_usage)

    # Measure CPU usage
    process = psutil.Process()
    start_cpu = process.cpu_percent(interval=None)
    encryption_function(password)
    cpu_usage = process.cpu_percent(interval=None) - start_cpu

    return encryption_time, max_memory, cpu_usage

# Run tests and collect data
results = []
for password in passwords:
    encryption_time, max_memory, cpu_usage = measure_costs(encrypt_password_with_ml, password)
    results.append({
        "password": password,
        "encryption_time": encryption_time,
        "max_memory": max_memory,
        "cpu_usage": cpu_usage
    })

# Print results
for result in results:
    print(f"Password: {result['password']}, Time: {result['encryption_time']}s, Memory: {result['max_memory']}MB, CPU: {result['cpu_usage']}%")

# Visualize results
passwords = [result['password'] for result in results]
time_costs = [result['encryption_time'] for result in results]
memory_costs = [result['max_memory'] for result in results]
cpu_costs = [result['cpu_usage'] for result in results]

plt.figure(figsize=(15, 8))

# Plot Time Costs
plt.subplot(2, 2, 1)
plt.bar(passwords, time_costs, color='b', alpha=0.7)
plt.xticks(rotation=45)
plt.ylabel('Time (s)')
plt.title('Encryption Time Costs')

# Plot Memory Costs
plt.subplot(2, 2, 2)
plt.bar(passwords, memory_costs, color='g', alpha=0.7)
plt.xticks(rotation=45)
plt.ylabel('Memory (MB)')
plt.title('Memory Usage Costs')

# Plot CPU Costs
plt.subplot(2, 2, 3)
plt.bar(passwords, cpu_costs, color='r', alpha=0.7)
plt.xticks(rotation=45)
plt.ylabel('CPU (%)')
plt.title('CPU Usage Costs')

plt.tight_layout()
plt.show()
